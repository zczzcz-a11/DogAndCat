{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nvar _withScopeId = function _withScopeId(n) {\n  return _pushScopeId(\"data-v-1274c5b7\"), n = n(), _popScopeId(), n;\n};\nvar _hoisted_1 = {\n  \"class\": \"img-verify\"\n};\nvar _hoisted_2 = /*#__PURE__*/_withScopeId(function () {\n  return /*#__PURE__*/_createElementVNode(\"p\", {\n    \"class\": \"text\"\n  }, \"点击刷新验证码\", -1 /* HOISTED */);\n});\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"canvas\", {\n    width: \"120\",\n    height: \"40\",\n    ref: \"verify\",\n    onClick: $setup.handleDraw\n  }, null, 512 /* NEED_PATCH */), _hoisted_2]);\n}","map":{"version":3,"names":["_createElementVNode","_createElementBlock","_hoisted_1","width","height","ref","onClick","$setup","handleDraw","_hoisted_2"],"sources":["E:\\vue3\\pet-home-master\\pet-client\\src\\views\\login\\components\\VueImageVerify.vue"],"sourcesContent":["<template>\n  <div class=\"img-verify\">\n    <canvas width=\"120\" height=\"40\" ref=\"verify\" @click=\"handleDraw\"></canvas>\n    <p class=\"text\">点击刷新验证码</p>\n  </div>\n</template>\n\n<script setup>\nimport { onMounted, reactive, ref, defineEmits } from 'vue'\n\nconst verify = ref(null)\nconst state = reactive({\n  pool: 'ABDEFGHIJLMNPQRTUY23456789abdefghijmnpqrtuy',\n  imgCode: ''\n})\n\n// 父子组件传值的事件声明\nconst emits = defineEmits(['sendImgCode'])\nconst sendImgCode = code => {\n  emits('sendImgCode', code)\n}\n\nonMounted(() => {\n  handleDraw() // 开始生成验证码\n})\n\n// 随机数\nconst randomNum = (min, max) => parseInt(Math.random() * (max - min) + min)\n\n// 随机生成颜色\nconst randomColor = (min, max) => {\n  const r = randomNum(min, max)\n  const g = randomNum(min, max)\n  const b = randomNum(min, max)\n  return `rgb(${r},${g},${b})`\n}\n\n// 绘制验证图案\nconst draw = () => {\n  const ctx = verify.value.getContext('2d')\n  ctx.fillStyle = randomColor(180, 230)\n  ctx.fillRect(0, 0, 120, 40)\n  let imgCode = ''\n\n  // 随机产生字符串并进行绘制\n  for (let i = 0; i < 4; i++) {\n    const text = state.pool[randomNum(0, state.pool.length)]\n    imgCode += text\n    const fontSize = randomNum(18, 40)\n    const deg = randomNum(-30, 30)\n    ctx.font = fontSize + 'px Simhei'\n    ctx.textBaseline = 'top'\n    ctx.fillStyle = randomColor(80, 150)\n    ctx.save()\n    ctx.translate(30 * i + 15, 15)\n    ctx.rotate((deg * Math.PI) / 180)\n    ctx.fillText(text, -10, -15)\n    ctx.restore()\n  }\n  // 随机产生5条干扰线,干扰线的颜色要浅一点\n  for (let i = 0; i < 5; i++) {\n    ctx.beginPath()\n    ctx.moveTo(randomNum(0, 120), randomNum(0, 40))\n    ctx.lineTo(randomNum(0, 120), randomNum(0, 40))\n    ctx.strokeStyle = randomColor(180, 230)\n    ctx.closePath()\n    ctx.stroke()\n  }\n  // 随机产生40个干扰的小点\n  for (let i = 0; i < 40; i++) {\n    ctx.beginPath()\n    ctx.arc(randomNum(0, 120), randomNum(0, 40), 1, 0, 2 * Math.PI)\n    ctx.closePath()\n    ctx.fillStyle = randomColor(150, 200)\n    ctx.fill()\n  }\n  return imgCode\n}\n\nconst handleDraw = () => {\n  state.imgCode = draw()\n  sendImgCode(state.imgCode) //  向父组件传递验证码\n}\n</script>\n\n<style lang=\"less\" scoped>\n.text {\n  font-size: 10px;\n  line-height: 10px;\n}\n</style>\n"],"mappings":";;;;;EACO,SAAM;AAAY;;sBAErBA,mBAAA,CAA2B;IAAxB,SAAM;EAAM,GAAC,SAAO;AAAA;;;uBAFzBC,mBAAA,CAGM,OAHNC,UAGM,GAFJF,mBAAA,CAA0E;IAAlEG,KAAK,EAAC,KAAK;IAACC,MAAM,EAAC,IAAI;IAACC,GAAG,EAAC,QAAQ;IAAEC,OAAK,EAAEC,MAAA,CAAAC;kCACrDC,UAA2B,C"},"metadata":{},"sourceType":"module","externalDependencies":[]}