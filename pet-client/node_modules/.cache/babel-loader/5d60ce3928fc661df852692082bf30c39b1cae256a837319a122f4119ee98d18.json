{"ast":null,"code":"import _toConsumableArray from \"E:/vue3/pet-home-master/pet-client/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _objectWithoutProperties from \"E:/vue3/pet-home-master/pet-client/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nimport _objectSpread from \"E:/vue3/pet-home-master/pet-client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nvar _excluded = [\"token\"];\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.some.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array.find-index.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.json.stringify.js\";\nimport { defineStore } from 'pinia';\nimport { Toast } from 'vant';\nimport { login, userPetList, updataPet, userInfo, updataUser, deletePet, userChatRecord, userFond, setFondCollect, getFondCollect, updataUnreadNum, deleteChatList, deleteRecord } from '@/axios/index.js';\nimport io from 'socket.io-client';\nimport config from '@/axios/config.js';\nvar defaultState = {\n  userInfo: {\n    // 我的信息\n    id: '',\n    name: '',\n    sign: '',\n    userImg: ''\n  },\n  isLogin: false,\n  // 记录登录状态\n  socket: [],\n  // websocket实例\n  chatInfo: {\n    // 聊天对象的信息\n    id: '',\n    name: '',\n    userImg: '',\n    islogin: false,\n    listId: ''\n  },\n  chatList: [],\n  // 聊天对象列表\n  unreadObj: {\n    // 未读消息总数\n    num: 0\n  },\n  chatMessageList: [],\n  // 聊天对象记录\n  userPet: [],\n  // 用户的宠物信息\n  userCollect: [],\n  // 用户收藏的宠物信息\n  exitPetIndex: 0,\n  // 被修改宠物的index\n\n  pageStack: [] // 全局页面栈\n};\n\nexport var userStore = defineStore({\n  id: 'user',\n  // 命名，唯一\n  state: function state() {\n    return defaultState;\n  },\n  actions: {\n    // 聊天信息操作\n    socketConnect: function socketConnect() {\n      var _this = this;\n      console.log('开始建立连接！');\n      this.socket = io(config.socketUrl);\n      this.socket.on('connect', function () {\n        console.log(_this.socket.id, '监听客户端连接成功-connect');\n      });\n      this.socket.emit('login', {\n        id: this.getUserId()\n      }, function (res) {\n        if (!res) console.log('重复登录！');\n      });\n      // 监听广播信息\n      this.socket.on('message', function (data) {\n        _this.chatList.forEach(function (item) {\n          if (item.userId === data.id) {\n            item.islogin = data.islogin;\n          }\n        });\n      });\n      // 监听聊天对象发送过来的信息\n      this.socket.on('updateChatMessageList', function (data) {\n        _this.chatMessageList.push(data);\n        _this.chatList.forEach(function (item) {\n          if (data.chatlistid === item.id) {\n            item.newMsg = data.msg;\n            item.time = data.mtime;\n            item.unreadNum += 1;\n            _this.unreadObj.num += 1;\n          }\n        });\n        var result = _this.chatList.some(function (item) {\n          return data.chatlistid === item.id;\n        });\n        if (!result) _this.getChatListSync();\n      });\n    },\n    socketDisconnect: function socketDisconnect() {\n      console.log('断开连接！');\n      this.socket.disconnect();\n    },\n    getChatListSync: function getChatListSync() {\n      var _this2 = this;\n      return new Promise(function (resolve, reject) {\n        _this2.socket.emit('chatList', {\n          id: _this2.getUserId()\n        }, function (res) {\n          if (res) {\n            _this2.chatList = res;\n            _this2.setUnreadSum();\n            resolve(true);\n          }\n        });\n      });\n    },\n    setChatInfo: function setChatInfo(data) {\n      var _this3 = this;\n      var listId = data.listId,\n        chatId = data.chatId,\n        chatName = data.chatName,\n        chatImg = data.chatImg;\n      this.chatInfo.id = chatId;\n      this.chatInfo.name = chatName;\n      this.chatInfo.userImg = chatImg;\n      return new Promise(function (resolve, reject) {\n        userChatRecord({\n          listId: listId,\n          chatId: chatId\n        }).then(function (res) {\n          _this3.chatInfo.listId = res.data.listid;\n          // resolve(res.data.list);\n          res.data.list.forEach(function (item) {\n            if (item.receiverid === chatId) {\n              item.sender = _this3.userInfo.name;\n              item.receiver = chatName;\n              item.senderimg = _this3.userInfo.userImg;\n            } else if (item.receiverid === _this3.userInfo.id) {\n              item.sender = chatName;\n              item.receiver = _this3.userInfo.name;\n              item.senderimg = chatImg;\n            }\n          });\n          _this3.chatMessageList = res.data.list;\n          resolve(true);\n        });\n      });\n    },\n    setChatMessageList: function setChatMessageList(data) {\n      var _this4 = this;\n      var recoedItem = data;\n      this.socket.emit('privateChat', recoedItem, function (res) {\n        if (res.code !== 200) {\n          Toast.fail(res.mess);\n        } else {\n          recoedItem.chatrecordid = res.data;\n          _this4.chatMessageList.push(recoedItem);\n        }\n      });\n    },\n    getChatMessageList: function getChatMessageList() {\n      return this.chatMessageList;\n    },\n    setChatListSync: function setChatListSync(id) {\n      var _this5 = this;\n      deleteChatList({\n        id: id\n      }).then(function (res) {\n        var index = _this5.chatList.findIndex(function (item) {\n          return item.id === id;\n        });\n        if (index !== -1) _this5.chatList.splice(index, 1);\n        _this5.setUnreadSum();\n      });\n    },\n    getChatList: function getChatList() {\n      return this.chatList;\n    },\n    getChatInfoListId: function getChatInfoListId() {\n      return this.chatInfo.listId;\n    },\n    getChatInfoName: function getChatInfoName() {\n      return this.chatInfo.name;\n    },\n    getChatInfoId: function getChatInfoId() {\n      return this.chatInfo.id;\n    },\n    setChatListUnreadNew: function setChatListUnreadNew() {\n      updataUnreadNum({\n        listid: this.chatInfo.listId,\n        userid: this.userInfo.id\n      });\n    },\n    setUnreadSum: function setUnreadSum() {\n      var _this6 = this;\n      this.unreadObj.num = 0;\n      this.chatList.forEach(function (item) {\n        if (item.userId === _this6.chatInfo.id) {\n          item.unreadNum = 0;\n        }\n        _this6.unreadObj.num += item.unreadNum;\n      });\n    },\n    getUnreadSum: function getUnreadSum() {\n      return this.unreadObj;\n    },\n    deleteRecordSync: function deleteRecordSync(id) {\n      var _this7 = this;\n      deleteRecord({\n        id: id\n      }).then(function (res) {\n        var index = _this7.chatMessageList.findIndex(function (item) {\n          return item.chatrecordid === id;\n        });\n        if (index !== -1) _this7.chatMessageList.splice(index, 1);\n      });\n    },\n    // 全局页面栈操作\n    pageStackPush: function pageStackPush(item) {\n      this.pageStack.push(item);\n    },\n    pageStackShift: function pageStackShift() {\n      this.pageStack.shift();\n    },\n    getPageStack: function getPageStack() {\n      return this.pageStack;\n    },\n    // 用户信息操作\n    setUserName: function setUserName(name) {\n      this.userInfo.name = name;\n    },\n    setUserImg: function setUserImg(userImg) {\n      this.userInfo.userImg = userImg;\n    },\n    getUserId: function getUserId() {\n      return this.userInfo.id;\n    },\n    getUserName: function getUserName() {\n      return this.userInfo.name;\n    },\n    getUserImg: function getUserImg() {\n      return this.userInfo.userImg;\n    },\n    getUserSign: function getUserSign() {\n      return this.userInfo.sign;\n    },\n    getUserInfo: function getUserInfo() {\n      return this.userInfo;\n    },\n    setUserInfoSync: function setUserInfoSync(data) {\n      var _this8 = this;\n      return new Promise(function (resolve, reject) {\n        updataUser(data).then(function (res) {\n          Toast.success(res.mess);\n          _this8.userInfo = _objectSpread({\n            id: _this8.userInfo.id\n          }, data);\n          resolve();\n        });\n      });\n    },\n    getUserInfoSync: function getUserInfoSync() {\n      var _this9 = this;\n      userInfo().then(function (res) {\n        _this9.userInfo = _objectSpread({}, res.data);\n      });\n    },\n    loginByUserNameSync: function loginByUserNameSync(username, password) {\n      var _this10 = this;\n      return new Promise(function (resolve, reject) {\n        login({\n          username: username,\n          password: password\n        }).then(function (res) {\n          var _res$data = res.data,\n            token = _res$data.token,\n            userInfo = _objectWithoutProperties(_res$data, _excluded);\n          _this10.userInfo = userInfo;\n          localStorage.setItem('token', res.data.token);\n          resolve(res.mess);\n        });\n      });\n    },\n    // 宠物信息操作\n    getPetInfo: function getPetInfo() {\n      return this.userPet;\n    },\n    getPetInfoExit: function getPetInfoExit() {\n      return JSON.parse(JSON.stringify(this.userPet[this.exitPetIndex]));\n    },\n    setExitIndex: function setExitIndex(index) {\n      this.exitPetIndex = index;\n    },\n    savePetInfo: function savePetInfo(item) {\n      this.userPet[this.exitPetIndex] = JSON.parse(JSON.stringify(item));\n      updataPet({\n        data: _objectSpread({}, item)\n      }).then(function (res) {\n        Toast.success(res.mess);\n      });\n    },\n    getPetInfoSync: function getPetInfoSync() {\n      var _this11 = this;\n      userPetList().then(function (res) {\n        _this11.userPet = _toConsumableArray(res.data);\n      });\n    },\n    deletePetInfo: function deletePetInfo(index) {\n      var _this12 = this;\n      var petid = this.userPet[index].petid;\n      deletePet({\n        petid: petid\n      }).then(function (res) {\n        _this12.userPet.splice(index, 1);\n        Toast.success(res.mess);\n      });\n    },\n    // 喜爱宠物信息操作\n    getFondInfo: function getFondInfo() {\n      return this.userCollect;\n    },\n    getFondInfoSync: function getFondInfoSync() {\n      var _this13 = this;\n      return new Promise(function (resolve, reject) {\n        userFond().then(function (res) {\n          res.data.forEach(function (item) {\n            item.collect = true;\n          });\n          _this13.userCollect = _toConsumableArray(res.data);\n          resolve();\n        });\n      });\n    },\n    getCollectByPetId: function getCollectByPetId(id) {\n      return new Promise(function (resolve, reject) {\n        getFondCollect({\n          id: id\n        }).then(function (res) {\n          resolve(res.data);\n        });\n      });\n    },\n    setFondCollectSync: function setFondCollectSync(id) {\n      return new Promise(function (resolve, reject) {\n        setFondCollect({\n          id: id\n        }).then(function (res) {\n          resolve(res.data);\n        });\n      });\n    },\n    setUserCollect: function setUserCollect(petid) {\n      var index = this.userCollect.findIndex(function (item) {\n        return item.petid === petid;\n      });\n      if (index != -1) {\n        this.userCollect.splice(index, 1);\n        this.setFondCollectSync(petid);\n      }\n    },\n    // 退出登录，做数据清理\n    emptyState: function emptyState() {\n      window.localStorage.clear();\n      location.reload();\n    }\n  },\n  persist: {\n    // 开启数据缓存\n    enabled: true\n  }\n});","map":{"version":3,"names":["defineStore","Toast","login","userPetList","updataPet","userInfo","updataUser","deletePet","userChatRecord","userFond","setFondCollect","getFondCollect","updataUnreadNum","deleteChatList","deleteRecord","io","config","defaultState","id","name","sign","userImg","isLogin","socket","chatInfo","islogin","listId","chatList","unreadObj","num","chatMessageList","userPet","userCollect","exitPetIndex","pageStack","userStore","state","actions","socketConnect","_this","console","log","socketUrl","on","emit","getUserId","res","data","forEach","item","userId","push","chatlistid","newMsg","msg","time","mtime","unreadNum","result","some","getChatListSync","socketDisconnect","disconnect","_this2","Promise","resolve","reject","setUnreadSum","setChatInfo","_this3","chatId","chatName","chatImg","then","listid","list","receiverid","sender","receiver","senderimg","setChatMessageList","_this4","recoedItem","code","fail","mess","chatrecordid","getChatMessageList","setChatListSync","_this5","index","findIndex","splice","getChatList","getChatInfoListId","getChatInfoName","getChatInfoId","setChatListUnreadNew","userid","_this6","getUnreadSum","deleteRecordSync","_this7","pageStackPush","pageStackShift","shift","getPageStack","setUserName","setUserImg","getUserName","getUserImg","getUserSign","getUserInfo","setUserInfoSync","_this8","success","_objectSpread","getUserInfoSync","_this9","loginByUserNameSync","username","password","_this10","_res$data","token","_objectWithoutProperties","_excluded","localStorage","setItem","getPetInfo","getPetInfoExit","JSON","parse","stringify","setExitIndex","savePetInfo","getPetInfoSync","_this11","_toConsumableArray","deletePetInfo","_this12","petid","getFondInfo","getFondInfoSync","_this13","collect","getCollectByPetId","setFondCollectSync","setUserCollect","emptyState","window","clear","location","reload","persist","enabled"],"sources":["E:/vue3/pet-home-master/pet-client/src/store/user.js"],"sourcesContent":["import { defineStore } from 'pinia'\nimport { Toast } from 'vant'\nimport { login, userPetList, updataPet, userInfo, updataUser, deletePet, userChatRecord, userFond, setFondCollect, getFondCollect, updataUnreadNum, deleteChatList, deleteRecord } from '@/axios/index.js'\nimport io from 'socket.io-client'\nimport config from '@/axios/config.js'\n\nconst defaultState = {\n  userInfo: {\n    // 我的信息\n    id: '',\n    name: '',\n    sign: '',\n    userImg: ''\n  },\n  isLogin: false, // 记录登录状态\n  socket: [], // websocket实例\n  chatInfo: {\n    // 聊天对象的信息\n    id: '',\n    name: '',\n    userImg: '',\n    islogin: false,\n    listId: ''\n  },\n  chatList: [], // 聊天对象列表\n  unreadObj: {\n    // 未读消息总数\n    num: 0\n  },\n  chatMessageList: [], // 聊天对象记录\n  userPet: [], // 用户的宠物信息\n  userCollect: [], // 用户收藏的宠物信息\n  exitPetIndex: 0, // 被修改宠物的index\n\n  pageStack: [] // 全局页面栈\n}\n\nexport const userStore = defineStore({\n  id: 'user', // 命名，唯一\n  state: () => {\n    return defaultState\n  },\n  actions: {\n    // 聊天信息操作\n    socketConnect() {\n      console.log('开始建立连接！')\n      this.socket = io(config.socketUrl)\n      this.socket.on('connect', () => {\n        console.log(this.socket.id, '监听客户端连接成功-connect')\n      })\n      this.socket.emit('login', { id: this.getUserId() }, res => {\n        if (!res) console.log('重复登录！')\n      })\n      // 监听广播信息\n      this.socket.on('message', data => {\n        this.chatList.forEach(item => {\n          if (item.userId === data.id) {\n            item.islogin = data.islogin\n          }\n        })\n      })\n      // 监听聊天对象发送过来的信息\n      this.socket.on('updateChatMessageList', data => {\n        this.chatMessageList.push(data)\n        this.chatList.forEach(item => {\n          if (data.chatlistid === item.id) {\n            item.newMsg = data.msg\n            item.time = data.mtime\n            item.unreadNum += 1\n            this.unreadObj.num += 1\n          }\n        })\n\n        let result = this.chatList.some(item => {\n          return data.chatlistid === item.id\n        })\n\n        if (!result) this.getChatListSync()\n      })\n    },\n    socketDisconnect() {\n      console.log('断开连接！')\n      this.socket.disconnect()\n    },\n    getChatListSync() {\n      return new Promise((resolve, reject) => {\n        this.socket.emit('chatList', { id: this.getUserId() }, res => {\n          if (res) {\n            this.chatList = res\n            this.setUnreadSum()\n            resolve(true)\n          }\n        })\n      })\n    },\n    setChatInfo(data) {\n      const { listId, chatId, chatName, chatImg } = data\n      this.chatInfo.id = chatId\n      this.chatInfo.name = chatName\n      this.chatInfo.userImg = chatImg\n\n      return new Promise((resolve, reject) => {\n        userChatRecord({ listId, chatId }).then(res => {\n          this.chatInfo.listId = res.data.listid\n          // resolve(res.data.list);\n          res.data.list.forEach(item => {\n            if (item.receiverid === chatId) {\n              item.sender = this.userInfo.name\n              item.receiver = chatName\n              item.senderimg = this.userInfo.userImg\n            } else if (item.receiverid === this.userInfo.id) {\n              item.sender = chatName\n              item.receiver = this.userInfo.name\n              item.senderimg = chatImg\n            }\n          })\n          this.chatMessageList = res.data.list\n          resolve(true)\n        })\n      })\n    },\n    setChatMessageList(data) {\n      const recoedItem = data\n      this.socket.emit('privateChat', recoedItem, res => {\n        if (res.code !== 200) {\n          Toast.fail(res.mess)\n        } else {\n          recoedItem.chatrecordid = res.data\n          this.chatMessageList.push(recoedItem)\n        }\n      })\n    },\n    getChatMessageList() {\n      return this.chatMessageList\n    },\n\n    setChatListSync(id) {\n      deleteChatList({ id }).then(res => {\n        let index = this.chatList.findIndex(item => item.id === id)\n        if (index !== -1) this.chatList.splice(index, 1)\n        this.setUnreadSum()\n      })\n    },\n    getChatList() {\n      return this.chatList\n    },\n\n    getChatInfoListId() {\n      return this.chatInfo.listId\n    },\n    getChatInfoName() {\n      return this.chatInfo.name\n    },\n    getChatInfoId() {\n      return this.chatInfo.id\n    },\n    setChatListUnreadNew() {\n      updataUnreadNum({ listid: this.chatInfo.listId, userid: this.userInfo.id })\n    },\n\n    setUnreadSum() {\n      this.unreadObj.num = 0\n      this.chatList.forEach(item => {\n        if (item.userId === this.chatInfo.id) {\n          item.unreadNum = 0\n        }\n        this.unreadObj.num += item.unreadNum\n      })\n    },\n    getUnreadSum() {\n      return this.unreadObj\n    },\n\n    deleteRecordSync(id) {\n      deleteRecord({ id }).then(res => {\n        let index = this.chatMessageList.findIndex(item => item.chatrecordid === id)\n        if (index !== -1) this.chatMessageList.splice(index, 1)\n      })\n    },\n\n    // 全局页面栈操作\n    pageStackPush(item) {\n      this.pageStack.push(item)\n    },\n    pageStackShift() {\n      this.pageStack.shift()\n    },\n    getPageStack() {\n      return this.pageStack\n    },\n\n    // 用户信息操作\n    setUserName(name) {\n      this.userInfo.name = name\n    },\n    setUserImg(userImg) {\n      this.userInfo.userImg = userImg\n    },\n\n    getUserId() {\n      return this.userInfo.id\n    },\n    getUserName() {\n      return this.userInfo.name\n    },\n    getUserImg() {\n      return this.userInfo.userImg\n    },\n    getUserSign() {\n      return this.userInfo.sign\n    },\n    getUserInfo() {\n      return this.userInfo\n    },\n\n    setUserInfoSync(data) {\n      return new Promise((resolve, reject) => {\n        updataUser(data).then(res => {\n          Toast.success(res.mess)\n          this.userInfo = { id: this.userInfo.id, ...data }\n          resolve()\n        })\n      })\n    },\n    getUserInfoSync() {\n      userInfo().then(res => {\n        this.userInfo = { ...res.data }\n      })\n    },\n    loginByUserNameSync(username, password) {\n      return new Promise((resolve, reject) => {\n        login({ username, password }).then(res => {\n          const { token, ...userInfo } = res.data\n          this.userInfo = userInfo\n          localStorage.setItem('token', res.data.token)\n          resolve(res.mess)\n        })\n      })\n    },\n\n    // 宠物信息操作\n    getPetInfo() {\n      return this.userPet\n    },\n    getPetInfoExit() {\n      return JSON.parse(JSON.stringify(this.userPet[this.exitPetIndex]))\n    },\n    setExitIndex(index) {\n      this.exitPetIndex = index\n    },\n    savePetInfo(item) {\n      this.userPet[this.exitPetIndex] = JSON.parse(JSON.stringify(item))\n      updataPet({ data: { ...item } }).then(res => {\n        Toast.success(res.mess)\n      })\n    },\n    getPetInfoSync() {\n      userPetList().then(res => {\n        this.userPet = [...res.data]\n      })\n    },\n    deletePetInfo(index) {\n      let petid = this.userPet[index].petid\n      deletePet({ petid }).then(res => {\n        this.userPet.splice(index, 1)\n        Toast.success(res.mess)\n      })\n    },\n\n    // 喜爱宠物信息操作\n    getFondInfo() {\n      return this.userCollect\n    },\n    getFondInfoSync() {\n      return new Promise((resolve, reject) => {\n        userFond().then(res => {\n          res.data.forEach(item => {\n            item.collect = true\n          })\n          this.userCollect = [...res.data]\n          resolve()\n        })\n      })\n    },\n    getCollectByPetId(id) {\n      return new Promise((resolve, reject) => {\n        getFondCollect({ id }).then(res => {\n          resolve(res.data)\n        })\n      })\n    },\n    setFondCollectSync(id) {\n      return new Promise((resolve, reject) => {\n        setFondCollect({ id }).then(res => {\n          resolve(res.data)\n        })\n      })\n    },\n    setUserCollect(petid) {\n      let index = this.userCollect.findIndex(item => item.petid === petid)\n      if (index != -1) {\n        this.userCollect.splice(index, 1)\n        this.setFondCollectSync(petid)\n      }\n    },\n\n    // 退出登录，做数据清理\n    emptyState() {\n      window.localStorage.clear()\n      location.reload()\n    }\n  },\n  persist: {\n    // 开启数据缓存\n    enabled: true\n  }\n})\n"],"mappings":";;;;;;;;;;;;;AAAA,SAASA,WAAW,QAAQ,OAAO;AACnC,SAASC,KAAK,QAAQ,MAAM;AAC5B,SAASC,KAAK,EAAEC,WAAW,EAAEC,SAAS,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,SAAS,EAAEC,cAAc,EAAEC,QAAQ,EAAEC,cAAc,EAAEC,cAAc,EAAEC,eAAe,EAAEC,cAAc,EAAEC,YAAY,QAAQ,kBAAkB;AAC1M,OAAOC,EAAE,MAAM,kBAAkB;AACjC,OAAOC,MAAM,MAAM,mBAAmB;AAEtC,IAAMC,YAAY,GAAG;EACnBZ,QAAQ,EAAE;IACR;IACAa,EAAE,EAAE,EAAE;IACNC,IAAI,EAAE,EAAE;IACRC,IAAI,EAAE,EAAE;IACRC,OAAO,EAAE;EACX,CAAC;EACDC,OAAO,EAAE,KAAK;EAAE;EAChBC,MAAM,EAAE,EAAE;EAAE;EACZC,QAAQ,EAAE;IACR;IACAN,EAAE,EAAE,EAAE;IACNC,IAAI,EAAE,EAAE;IACRE,OAAO,EAAE,EAAE;IACXI,OAAO,EAAE,KAAK;IACdC,MAAM,EAAE;EACV,CAAC;EACDC,QAAQ,EAAE,EAAE;EAAE;EACdC,SAAS,EAAE;IACT;IACAC,GAAG,EAAE;EACP,CAAC;EACDC,eAAe,EAAE,EAAE;EAAE;EACrBC,OAAO,EAAE,EAAE;EAAE;EACbC,WAAW,EAAE,EAAE;EAAE;EACjBC,YAAY,EAAE,CAAC;EAAE;;EAEjBC,SAAS,EAAE,EAAE,CAAC;AAChB,CAAC;;AAED,OAAO,IAAMC,SAAS,GAAGnC,WAAW,CAAC;EACnCkB,EAAE,EAAE,MAAM;EAAE;EACZkB,KAAK,EAAE,SAAAA,MAAA,EAAM;IACX,OAAOnB,YAAY;EACrB,CAAC;EACDoB,OAAO,EAAE;IACP;IACAC,aAAa,WAAAA,cAAA,EAAG;MAAA,IAAAC,KAAA;MACdC,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;MACtB,IAAI,CAAClB,MAAM,GAAGR,EAAE,CAACC,MAAM,CAAC0B,SAAS,CAAC;MAClC,IAAI,CAACnB,MAAM,CAACoB,EAAE,CAAC,SAAS,EAAE,YAAM;QAC9BH,OAAO,CAACC,GAAG,CAACF,KAAI,CAAChB,MAAM,CAACL,EAAE,EAAE,mBAAmB,CAAC;MAClD,CAAC,CAAC;MACF,IAAI,CAACK,MAAM,CAACqB,IAAI,CAAC,OAAO,EAAE;QAAE1B,EAAE,EAAE,IAAI,CAAC2B,SAAS;MAAG,CAAC,EAAE,UAAAC,GAAG,EAAI;QACzD,IAAI,CAACA,GAAG,EAAEN,OAAO,CAACC,GAAG,CAAC,OAAO,CAAC;MAChC,CAAC,CAAC;MACF;MACA,IAAI,CAAClB,MAAM,CAACoB,EAAE,CAAC,SAAS,EAAE,UAAAI,IAAI,EAAI;QAChCR,KAAI,CAACZ,QAAQ,CAACqB,OAAO,CAAC,UAAAC,IAAI,EAAI;UAC5B,IAAIA,IAAI,CAACC,MAAM,KAAKH,IAAI,CAAC7B,EAAE,EAAE;YAC3B+B,IAAI,CAACxB,OAAO,GAAGsB,IAAI,CAACtB,OAAO;UAC7B;QACF,CAAC,CAAC;MACJ,CAAC,CAAC;MACF;MACA,IAAI,CAACF,MAAM,CAACoB,EAAE,CAAC,uBAAuB,EAAE,UAAAI,IAAI,EAAI;QAC9CR,KAAI,CAACT,eAAe,CAACqB,IAAI,CAACJ,IAAI,CAAC;QAC/BR,KAAI,CAACZ,QAAQ,CAACqB,OAAO,CAAC,UAAAC,IAAI,EAAI;UAC5B,IAAIF,IAAI,CAACK,UAAU,KAAKH,IAAI,CAAC/B,EAAE,EAAE;YAC/B+B,IAAI,CAACI,MAAM,GAAGN,IAAI,CAACO,GAAG;YACtBL,IAAI,CAACM,IAAI,GAAGR,IAAI,CAACS,KAAK;YACtBP,IAAI,CAACQ,SAAS,IAAI,CAAC;YACnBlB,KAAI,CAACX,SAAS,CAACC,GAAG,IAAI,CAAC;UACzB;QACF,CAAC,CAAC;QAEF,IAAI6B,MAAM,GAAGnB,KAAI,CAACZ,QAAQ,CAACgC,IAAI,CAAC,UAAAV,IAAI,EAAI;UACtC,OAAOF,IAAI,CAACK,UAAU,KAAKH,IAAI,CAAC/B,EAAE;QACpC,CAAC,CAAC;QAEF,IAAI,CAACwC,MAAM,EAAEnB,KAAI,CAACqB,eAAe,EAAE;MACrC,CAAC,CAAC;IACJ,CAAC;IACDC,gBAAgB,WAAAA,iBAAA,EAAG;MACjBrB,OAAO,CAACC,GAAG,CAAC,OAAO,CAAC;MACpB,IAAI,CAAClB,MAAM,CAACuC,UAAU,EAAE;IAC1B,CAAC;IACDF,eAAe,WAAAA,gBAAA,EAAG;MAAA,IAAAG,MAAA;MAChB,OAAO,IAAIC,OAAO,CAAC,UAACC,OAAO,EAAEC,MAAM,EAAK;QACtCH,MAAI,CAACxC,MAAM,CAACqB,IAAI,CAAC,UAAU,EAAE;UAAE1B,EAAE,EAAE6C,MAAI,CAAClB,SAAS;QAAG,CAAC,EAAE,UAAAC,GAAG,EAAI;UAC5D,IAAIA,GAAG,EAAE;YACPiB,MAAI,CAACpC,QAAQ,GAAGmB,GAAG;YACnBiB,MAAI,CAACI,YAAY,EAAE;YACnBF,OAAO,CAAC,IAAI,CAAC;UACf;QACF,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ,CAAC;IACDG,WAAW,WAAAA,YAACrB,IAAI,EAAE;MAAA,IAAAsB,MAAA;MAChB,IAAQ3C,MAAM,GAAgCqB,IAAI,CAA1CrB,MAAM;QAAE4C,MAAM,GAAwBvB,IAAI,CAAlCuB,MAAM;QAAEC,QAAQ,GAAcxB,IAAI,CAA1BwB,QAAQ;QAAEC,OAAO,GAAKzB,IAAI,CAAhByB,OAAO;MACzC,IAAI,CAAChD,QAAQ,CAACN,EAAE,GAAGoD,MAAM;MACzB,IAAI,CAAC9C,QAAQ,CAACL,IAAI,GAAGoD,QAAQ;MAC7B,IAAI,CAAC/C,QAAQ,CAACH,OAAO,GAAGmD,OAAO;MAE/B,OAAO,IAAIR,OAAO,CAAC,UAACC,OAAO,EAAEC,MAAM,EAAK;QACtC1D,cAAc,CAAC;UAAEkB,MAAM,EAANA,MAAM;UAAE4C,MAAM,EAANA;QAAO,CAAC,CAAC,CAACG,IAAI,CAAC,UAAA3B,GAAG,EAAI;UAC7CuB,MAAI,CAAC7C,QAAQ,CAACE,MAAM,GAAGoB,GAAG,CAACC,IAAI,CAAC2B,MAAM;UACtC;UACA5B,GAAG,CAACC,IAAI,CAAC4B,IAAI,CAAC3B,OAAO,CAAC,UAAAC,IAAI,EAAI;YAC5B,IAAIA,IAAI,CAAC2B,UAAU,KAAKN,MAAM,EAAE;cAC9BrB,IAAI,CAAC4B,MAAM,GAAGR,MAAI,CAAChE,QAAQ,CAACc,IAAI;cAChC8B,IAAI,CAAC6B,QAAQ,GAAGP,QAAQ;cACxBtB,IAAI,CAAC8B,SAAS,GAAGV,MAAI,CAAChE,QAAQ,CAACgB,OAAO;YACxC,CAAC,MAAM,IAAI4B,IAAI,CAAC2B,UAAU,KAAKP,MAAI,CAAChE,QAAQ,CAACa,EAAE,EAAE;cAC/C+B,IAAI,CAAC4B,MAAM,GAAGN,QAAQ;cACtBtB,IAAI,CAAC6B,QAAQ,GAAGT,MAAI,CAAChE,QAAQ,CAACc,IAAI;cAClC8B,IAAI,CAAC8B,SAAS,GAAGP,OAAO;YAC1B;UACF,CAAC,CAAC;UACFH,MAAI,CAACvC,eAAe,GAAGgB,GAAG,CAACC,IAAI,CAAC4B,IAAI;UACpCV,OAAO,CAAC,IAAI,CAAC;QACf,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ,CAAC;IACDe,kBAAkB,WAAAA,mBAACjC,IAAI,EAAE;MAAA,IAAAkC,MAAA;MACvB,IAAMC,UAAU,GAAGnC,IAAI;MACvB,IAAI,CAACxB,MAAM,CAACqB,IAAI,CAAC,aAAa,EAAEsC,UAAU,EAAE,UAAApC,GAAG,EAAI;QACjD,IAAIA,GAAG,CAACqC,IAAI,KAAK,GAAG,EAAE;UACpBlF,KAAK,CAACmF,IAAI,CAACtC,GAAG,CAACuC,IAAI,CAAC;QACtB,CAAC,MAAM;UACLH,UAAU,CAACI,YAAY,GAAGxC,GAAG,CAACC,IAAI;UAClCkC,MAAI,CAACnD,eAAe,CAACqB,IAAI,CAAC+B,UAAU,CAAC;QACvC;MACF,CAAC,CAAC;IACJ,CAAC;IACDK,kBAAkB,WAAAA,mBAAA,EAAG;MACnB,OAAO,IAAI,CAACzD,eAAe;IAC7B,CAAC;IAED0D,eAAe,WAAAA,gBAACtE,EAAE,EAAE;MAAA,IAAAuE,MAAA;MAClB5E,cAAc,CAAC;QAAEK,EAAE,EAAFA;MAAG,CAAC,CAAC,CAACuD,IAAI,CAAC,UAAA3B,GAAG,EAAI;QACjC,IAAI4C,KAAK,GAAGD,MAAI,CAAC9D,QAAQ,CAACgE,SAAS,CAAC,UAAA1C,IAAI;UAAA,OAAIA,IAAI,CAAC/B,EAAE,KAAKA,EAAE;QAAA,EAAC;QAC3D,IAAIwE,KAAK,KAAK,CAAC,CAAC,EAAED,MAAI,CAAC9D,QAAQ,CAACiE,MAAM,CAACF,KAAK,EAAE,CAAC,CAAC;QAChDD,MAAI,CAACtB,YAAY,EAAE;MACrB,CAAC,CAAC;IACJ,CAAC;IACD0B,WAAW,WAAAA,YAAA,EAAG;MACZ,OAAO,IAAI,CAAClE,QAAQ;IACtB,CAAC;IAEDmE,iBAAiB,WAAAA,kBAAA,EAAG;MAClB,OAAO,IAAI,CAACtE,QAAQ,CAACE,MAAM;IAC7B,CAAC;IACDqE,eAAe,WAAAA,gBAAA,EAAG;MAChB,OAAO,IAAI,CAACvE,QAAQ,CAACL,IAAI;IAC3B,CAAC;IACD6E,aAAa,WAAAA,cAAA,EAAG;MACd,OAAO,IAAI,CAACxE,QAAQ,CAACN,EAAE;IACzB,CAAC;IACD+E,oBAAoB,WAAAA,qBAAA,EAAG;MACrBrF,eAAe,CAAC;QAAE8D,MAAM,EAAE,IAAI,CAAClD,QAAQ,CAACE,MAAM;QAAEwE,MAAM,EAAE,IAAI,CAAC7F,QAAQ,CAACa;MAAG,CAAC,CAAC;IAC7E,CAAC;IAEDiD,YAAY,WAAAA,aAAA,EAAG;MAAA,IAAAgC,MAAA;MACb,IAAI,CAACvE,SAAS,CAACC,GAAG,GAAG,CAAC;MACtB,IAAI,CAACF,QAAQ,CAACqB,OAAO,CAAC,UAAAC,IAAI,EAAI;QAC5B,IAAIA,IAAI,CAACC,MAAM,KAAKiD,MAAI,CAAC3E,QAAQ,CAACN,EAAE,EAAE;UACpC+B,IAAI,CAACQ,SAAS,GAAG,CAAC;QACpB;QACA0C,MAAI,CAACvE,SAAS,CAACC,GAAG,IAAIoB,IAAI,CAACQ,SAAS;MACtC,CAAC,CAAC;IACJ,CAAC;IACD2C,YAAY,WAAAA,aAAA,EAAG;MACb,OAAO,IAAI,CAACxE,SAAS;IACvB,CAAC;IAEDyE,gBAAgB,WAAAA,iBAACnF,EAAE,EAAE;MAAA,IAAAoF,MAAA;MACnBxF,YAAY,CAAC;QAAEI,EAAE,EAAFA;MAAG,CAAC,CAAC,CAACuD,IAAI,CAAC,UAAA3B,GAAG,EAAI;QAC/B,IAAI4C,KAAK,GAAGY,MAAI,CAACxE,eAAe,CAAC6D,SAAS,CAAC,UAAA1C,IAAI;UAAA,OAAIA,IAAI,CAACqC,YAAY,KAAKpE,EAAE;QAAA,EAAC;QAC5E,IAAIwE,KAAK,KAAK,CAAC,CAAC,EAAEY,MAAI,CAACxE,eAAe,CAAC8D,MAAM,CAACF,KAAK,EAAE,CAAC,CAAC;MACzD,CAAC,CAAC;IACJ,CAAC;IAED;IACAa,aAAa,WAAAA,cAACtD,IAAI,EAAE;MAClB,IAAI,CAACf,SAAS,CAACiB,IAAI,CAACF,IAAI,CAAC;IAC3B,CAAC;IACDuD,cAAc,WAAAA,eAAA,EAAG;MACf,IAAI,CAACtE,SAAS,CAACuE,KAAK,EAAE;IACxB,CAAC;IACDC,YAAY,WAAAA,aAAA,EAAG;MACb,OAAO,IAAI,CAACxE,SAAS;IACvB,CAAC;IAED;IACAyE,WAAW,WAAAA,YAACxF,IAAI,EAAE;MAChB,IAAI,CAACd,QAAQ,CAACc,IAAI,GAAGA,IAAI;IAC3B,CAAC;IACDyF,UAAU,WAAAA,WAACvF,OAAO,EAAE;MAClB,IAAI,CAAChB,QAAQ,CAACgB,OAAO,GAAGA,OAAO;IACjC,CAAC;IAEDwB,SAAS,WAAAA,UAAA,EAAG;MACV,OAAO,IAAI,CAACxC,QAAQ,CAACa,EAAE;IACzB,CAAC;IACD2F,WAAW,WAAAA,YAAA,EAAG;MACZ,OAAO,IAAI,CAACxG,QAAQ,CAACc,IAAI;IAC3B,CAAC;IACD2F,UAAU,WAAAA,WAAA,EAAG;MACX,OAAO,IAAI,CAACzG,QAAQ,CAACgB,OAAO;IAC9B,CAAC;IACD0F,WAAW,WAAAA,YAAA,EAAG;MACZ,OAAO,IAAI,CAAC1G,QAAQ,CAACe,IAAI;IAC3B,CAAC;IACD4F,WAAW,WAAAA,YAAA,EAAG;MACZ,OAAO,IAAI,CAAC3G,QAAQ;IACtB,CAAC;IAED4G,eAAe,WAAAA,gBAAClE,IAAI,EAAE;MAAA,IAAAmE,MAAA;MACpB,OAAO,IAAIlD,OAAO,CAAC,UAACC,OAAO,EAAEC,MAAM,EAAK;QACtC5D,UAAU,CAACyC,IAAI,CAAC,CAAC0B,IAAI,CAAC,UAAA3B,GAAG,EAAI;UAC3B7C,KAAK,CAACkH,OAAO,CAACrE,GAAG,CAACuC,IAAI,CAAC;UACvB6B,MAAI,CAAC7G,QAAQ,GAAA+G,aAAA;YAAKlG,EAAE,EAAEgG,MAAI,CAAC7G,QAAQ,CAACa;UAAE,GAAK6B,IAAI,CAAE;UACjDkB,OAAO,EAAE;QACX,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ,CAAC;IACDoD,eAAe,WAAAA,gBAAA,EAAG;MAAA,IAAAC,MAAA;MAChBjH,QAAQ,EAAE,CAACoE,IAAI,CAAC,UAAA3B,GAAG,EAAI;QACrBwE,MAAI,CAACjH,QAAQ,GAAA+G,aAAA,KAAQtE,GAAG,CAACC,IAAI,CAAE;MACjC,CAAC,CAAC;IACJ,CAAC;IACDwE,mBAAmB,WAAAA,oBAACC,QAAQ,EAAEC,QAAQ,EAAE;MAAA,IAAAC,OAAA;MACtC,OAAO,IAAI1D,OAAO,CAAC,UAACC,OAAO,EAAEC,MAAM,EAAK;QACtChE,KAAK,CAAC;UAAEsH,QAAQ,EAARA,QAAQ;UAAEC,QAAQ,EAARA;QAAS,CAAC,CAAC,CAAChD,IAAI,CAAC,UAAA3B,GAAG,EAAI;UACxC,IAAA6E,SAAA,GAA+B7E,GAAG,CAACC,IAAI;YAA/B6E,KAAK,GAAAD,SAAA,CAALC,KAAK;YAAKvH,QAAQ,GAAAwH,wBAAA,CAAAF,SAAA,EAAAG,SAAA;UAC1BJ,OAAI,CAACrH,QAAQ,GAAGA,QAAQ;UACxB0H,YAAY,CAACC,OAAO,CAAC,OAAO,EAAElF,GAAG,CAACC,IAAI,CAAC6E,KAAK,CAAC;UAC7C3D,OAAO,CAACnB,GAAG,CAACuC,IAAI,CAAC;QACnB,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ,CAAC;IAED;IACA4C,UAAU,WAAAA,WAAA,EAAG;MACX,OAAO,IAAI,CAAClG,OAAO;IACrB,CAAC;IACDmG,cAAc,WAAAA,eAAA,EAAG;MACf,OAAOC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,SAAS,CAAC,IAAI,CAACtG,OAAO,CAAC,IAAI,CAACE,YAAY,CAAC,CAAC,CAAC;IACpE,CAAC;IACDqG,YAAY,WAAAA,aAAC5C,KAAK,EAAE;MAClB,IAAI,CAACzD,YAAY,GAAGyD,KAAK;IAC3B,CAAC;IACD6C,WAAW,WAAAA,YAACtF,IAAI,EAAE;MAChB,IAAI,CAAClB,OAAO,CAAC,IAAI,CAACE,YAAY,CAAC,GAAGkG,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,SAAS,CAACpF,IAAI,CAAC,CAAC;MAClE7C,SAAS,CAAC;QAAE2C,IAAI,EAAAqE,aAAA,KAAOnE,IAAI;MAAG,CAAC,CAAC,CAACwB,IAAI,CAAC,UAAA3B,GAAG,EAAI;QAC3C7C,KAAK,CAACkH,OAAO,CAACrE,GAAG,CAACuC,IAAI,CAAC;MACzB,CAAC,CAAC;IACJ,CAAC;IACDmD,cAAc,WAAAA,eAAA,EAAG;MAAA,IAAAC,OAAA;MACftI,WAAW,EAAE,CAACsE,IAAI,CAAC,UAAA3B,GAAG,EAAI;QACxB2F,OAAI,CAAC1G,OAAO,GAAA2G,kBAAA,CAAO5F,GAAG,CAACC,IAAI,CAAC;MAC9B,CAAC,CAAC;IACJ,CAAC;IACD4F,aAAa,WAAAA,cAACjD,KAAK,EAAE;MAAA,IAAAkD,OAAA;MACnB,IAAIC,KAAK,GAAG,IAAI,CAAC9G,OAAO,CAAC2D,KAAK,CAAC,CAACmD,KAAK;MACrCtI,SAAS,CAAC;QAAEsI,KAAK,EAALA;MAAM,CAAC,CAAC,CAACpE,IAAI,CAAC,UAAA3B,GAAG,EAAI;QAC/B8F,OAAI,CAAC7G,OAAO,CAAC6D,MAAM,CAACF,KAAK,EAAE,CAAC,CAAC;QAC7BzF,KAAK,CAACkH,OAAO,CAACrE,GAAG,CAACuC,IAAI,CAAC;MACzB,CAAC,CAAC;IACJ,CAAC;IAED;IACAyD,WAAW,WAAAA,YAAA,EAAG;MACZ,OAAO,IAAI,CAAC9G,WAAW;IACzB,CAAC;IACD+G,eAAe,WAAAA,gBAAA,EAAG;MAAA,IAAAC,OAAA;MAChB,OAAO,IAAIhF,OAAO,CAAC,UAACC,OAAO,EAAEC,MAAM,EAAK;QACtCzD,QAAQ,EAAE,CAACgE,IAAI,CAAC,UAAA3B,GAAG,EAAI;UACrBA,GAAG,CAACC,IAAI,CAACC,OAAO,CAAC,UAAAC,IAAI,EAAI;YACvBA,IAAI,CAACgG,OAAO,GAAG,IAAI;UACrB,CAAC,CAAC;UACFD,OAAI,CAAChH,WAAW,GAAA0G,kBAAA,CAAO5F,GAAG,CAACC,IAAI,CAAC;UAChCkB,OAAO,EAAE;QACX,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ,CAAC;IACDiF,iBAAiB,WAAAA,kBAAChI,EAAE,EAAE;MACpB,OAAO,IAAI8C,OAAO,CAAC,UAACC,OAAO,EAAEC,MAAM,EAAK;QACtCvD,cAAc,CAAC;UAAEO,EAAE,EAAFA;QAAG,CAAC,CAAC,CAACuD,IAAI,CAAC,UAAA3B,GAAG,EAAI;UACjCmB,OAAO,CAACnB,GAAG,CAACC,IAAI,CAAC;QACnB,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ,CAAC;IACDoG,kBAAkB,WAAAA,mBAACjI,EAAE,EAAE;MACrB,OAAO,IAAI8C,OAAO,CAAC,UAACC,OAAO,EAAEC,MAAM,EAAK;QACtCxD,cAAc,CAAC;UAAEQ,EAAE,EAAFA;QAAG,CAAC,CAAC,CAACuD,IAAI,CAAC,UAAA3B,GAAG,EAAI;UACjCmB,OAAO,CAACnB,GAAG,CAACC,IAAI,CAAC;QACnB,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ,CAAC;IACDqG,cAAc,WAAAA,eAACP,KAAK,EAAE;MACpB,IAAInD,KAAK,GAAG,IAAI,CAAC1D,WAAW,CAAC2D,SAAS,CAAC,UAAA1C,IAAI;QAAA,OAAIA,IAAI,CAAC4F,KAAK,KAAKA,KAAK;MAAA,EAAC;MACpE,IAAInD,KAAK,IAAI,CAAC,CAAC,EAAE;QACf,IAAI,CAAC1D,WAAW,CAAC4D,MAAM,CAACF,KAAK,EAAE,CAAC,CAAC;QACjC,IAAI,CAACyD,kBAAkB,CAACN,KAAK,CAAC;MAChC;IACF,CAAC;IAED;IACAQ,UAAU,WAAAA,WAAA,EAAG;MACXC,MAAM,CAACvB,YAAY,CAACwB,KAAK,EAAE;MAC3BC,QAAQ,CAACC,MAAM,EAAE;IACnB;EACF,CAAC;EACDC,OAAO,EAAE;IACP;IACAC,OAAO,EAAE;EACX;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}